# Большой подвиг 6. (Для закрепления предыдущего материала). Вводится таблица целых чисел (см. пример ниже) размером
# N x N элементов (N определяется по входным данным). Эта таблица содержит нули, но кое-где - единицы.
# С помощью функции с именем verify, на вход которой передается двумерный список чисел, необходимо проверить,
# являются ли единицы изолированными друг от друга, то есть, вокруг каждой единицы должны быть нули.
# Рекомендуется следующий алгоритм. В функции verify производить перебор двумерного списка. Для каждого элемента
# (списка) со значением 1 вызывать еще одну вспомогательную функцию is_isolate для проверки изолированности единицы.
# То есть, функция is_isolate должна возвращать True, если единица изолирована и False - в противном случае.
# Как только встречается не изолированная единица, функция verify должна возвращать False. Если успешно доходим
# (по элементам списка) до конца, то возвращается значение True.
# Функцию выполнять не нужно, только определить.
# P. S. При реализации функции is_isolate не следует прописывать восемь операторов if. Подумайте, как это можно сделать
# красивее (с точки зрения реализации алгоритма).
# ====================
# Sample Input:
# 1 0 0 0 0
# 0 0 1 0 0
# 0 0 0 0 0
# 0 1 0 1 0
# 0 0 0 0 0
# ====================
# Sample Output:
# True


import sys

s = sys.stdin.readlines()
lst_in = [list(map(int, x.strip().split())) for x in s]


def is_isolate(*args):
    return sum(*args) < 2


def verify(lst):
    size = len(lst)
    return False not in [is_isolate(lst[i][j:j+2] + lst[i+1][j:j+2]) for j in range(size - 1)
                         for i in range(size - 1)]


print(verify(lst_in))